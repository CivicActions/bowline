#!/usr/bin/env bash

# check if we're on the host
if [ -e "/proc/self/cgroup" ];then
  [ "$(grep docker /proc/self/cgroup)" ] && export context="container"
fi
[ "$context" ] || export context="host"

get_container_name () { echo "${SLUG}_${1}_1"; }

check_build() { unset CONTAINERS_BUILT; [ "$(docker ps -a | grep ${SLUG}_web)" ] && CONTAINERS_BUILT="true"; }

# Set basic env variables.
bowline_init () {
  cd $(dirname $0)
  GIT_ROOT=$(git rev-parse --show-toplevel)
  if [ -f "${GIT_ROOT}/.bowline/config" ]; then source "${GIT_ROOT}/.bowline/config"; fi
  BOWLINE=${GIT_ROOT##*/}
  if [ "${COMPOSE_PROJECT_NAME}" ];then BOWLINE=${COMPOSE_PROJECT_NAME}; fi
  GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  export HOST_UID=$(id -u)
  export HOST_GID=$(id -g)
  SLUG=${BOWLINE//-/}  # Fig/Compose doesn't allow the - char.
  SLUG=${SLUG//_/}  # Fig/Compose doesn't allow the _ char.
  SLUG=$(echo ${SLUG} | tr "[A-Z]" "[a-z]") # Mixed case dirs cause issue with docker image names
  DCOMPOSE="docker-compose"
  if [ ! "$(command -v docker-compose)" ];then
    if [ "$(command -v fig)" ];then
      echo "Using fig which is deprecated and replaced with docker-compose."
      echo "https://docs.docker.com/compose/install/"
      DCOMPOSE="fig -f docker-compose.yml"
    else
      echo "Docker Compose is required for using Bowline"
      echo "https://docs.docker.com/compose/install/"
      exit 1
    fi
  fi
  DCOMPOSE="$DCOMPOSE -p $SLUG"

  cd $GIT_ROOT

  ### @@ Note, everytime the ip changes the following should run
  # Add some useful container env
  check_build
  list_containers=$(grep '^\S*:' docker-compose.yml)
  unset containers
  for c in $list_containers; do
    name="${c%:}"
    container_name="$(get_container_name ${name})"
    # Set variables such as $web and $db from the docker-compose.yml.
    export "${name}=${container_name}"
    # Set IP addresses if they are available.
    if [ "$CONTAINERS_BUILT" ];then
      local ip="$(docker inspect --format='{{.NetworkSettings.IPAddress}}' ${container_name})"
      [ "$ip" ] && export "${name}_ip"=$ip || export "${name}_ip"="not running"
    else
      export "${name}_ip"="not built"
    fi
    export containers="${containers} ${name}"
  done

  [ "$CONF_WEB_DOMAIN" ] && WEB_DOMAIN=$CONF_WEB_DOMAIN || WEB_DOMAIN="${SLUG}.localtest.me"
}

[ $context = "host" ] && bowline_init


assert_proxy () {
  local proxy_image=traefik
  local proxy_domain=localtest.me
  # Check if the proxy container is running.
  if [ ! "$(docker ps -f name=proxy -f ancestor=$proxy_image -q)" ];then
    # Check if the proxy container stopped.
    if [ "$(docker ps -f name=proxy -f ancestor=$proxy_image -qa)" ];then
      echo "Restarting proxy container"
      docker start proxy
    else
      echo "Starting proxy container"
      docker run -d --privileged \
        -p 80:80 -p 443:443 -p 8080:8080 \
        -v /var/run/docker.sock:/var/run/docker.sock -v /dev/null:/etc/traefik/traefik.toml \
        --name=proxy traefik --web --docker --docker.domain=${proxy_domain} --logLevel=DEBUG
    fi
  fi

  # Configure host for proxy.
  local proxyconf_file=".bowline/docker-compose.proxyconf.yml"
  echo -e "web:\n  labels:" > $proxyconf_file
  echo -e "    - traefik.backend=${SLUG}" >> $proxyconf_file
  echo -e "    - traefik.frontend.rule=Host:${WEB_DOMAIN}" >> $proxyconf_file

  DCOMPOSE="$DCOMPOSE -f docker-compose.yml -f $proxyconf_file"
}

assert_running () {
  local cn=$(get_container_name web)
  RUNNING=$(docker inspect --format="{{ .State.Running }}" ${cn} 2> /dev/null)
  [ "$RUNNING" = "true" ] || $DCOMPOSE up -d --no-recreate
}

assert_composer () {
  if [ ! -d "vendor" ];then
    echo "Setting up Composer...."
    docker exec ${web} chown -R www-data:www-data /var/www
    docker exec ${web} chown www-data:www-data /usr/local/bin/composer.phar
    docker exec --user www-data ${web} composer --working-dir=/var/www self-update
    docker exec --user www-data ${web} composer --working-dir=/var/www install
  fi
}

enter_container () {
  if [ $context = "container" ];then
    cd /var/www
    return
  fi
  assert_running
  docker exec -it $(get_container_name web) /var/www/bin/$(basename $0) $@
  EXIT=$?
  echo Exit Status: $EXIT
  exit $EXIT
}

system-check () {
  source $GIT_ROOT/lib/bowline/system-check
}
